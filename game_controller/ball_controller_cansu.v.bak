module ball_controller #(
	parameter PLAYER_RADIUS,		// 35 px works
	parameter BALL_RADIUS,
	parameter GOAL_RADIUS,
	parameter MOVEMENT_FREQUENCY	// inversely proportinal to speed ('d200000 works)
)
(
	input clk,
//	input [9:0] x_position,
//	input [9:0] y_position,
	input [9:0] team1_ver_pos,
//	input [9:0] team1_hor_pos,
	input [9:0] team2_ver_pos,
//	input [9:0] team2_hor_pos,

	input team1_vu_button,
	input team1_vd_button,
	input team2_vu_button,
	input team2_vd_button,
	
	output reg score_to_team1,
	output reg score_to_team2,
	output reg [9:0] x_position,
	output reg [9:0] y_position,
	output reg [9:0] x_blugger,
	output reg [9:0] y_blugger
);

	reg [1:0] ball_dir_x; 
	
	parameter x_right = 'd0;
	parameter x_left = 'd1;
	
	reg [1:0] ball_dir_y;
	parameter y_up ='d0;
	parameter y_down = 'd1;
	

	integer ball_collution;
	integer a;
	integer inside_goal = (GOAL_RADIUS - BALL_RADIUS) ** 2;
	
	integer cansu;

	reg [1:0] state;
	
	parameter beginning   = 'd0;
	parameter active      = 'd1;
	
	reg [1:0] state_blugger;
	
	parameter initial_blugger ='d0;
	parameter active_blugger ='d1;
	
	reg [30:0] x_positions;
	reg [30:0] y_positions;
	integer counter;
	
	initial begin 
		state          = beginning;
		counter        =    0;
		x_position     =  463;
		y_position     =  275;
		score_to_team1 =    0;
		score_to_team2 =    0;
		ball_dir_x     = x_right;
		ball_dir_y     = y_down;
		ball_collution = 0;
		cansu				=1;
		
	
		//x_positions = {10'b0 + 'd463, 10'b0 + 'd463, 10'b0 + 463};
		//y_positions = {10'b0 + 'd275, 10'b0 + 'd275, 10'b0 + 275};
	
		//x_blugger = ;
		//y_blugger = ;
	end
	/*always @(posedge clk) begin
		x_positions <= x_positions << 'd10 + x_position;
		y_positions <= y_positions << 'd10 + y_position;
	end*/
	always @(posedge clk) begin
		if (counter < MOVEMENT_FREQUENCY) begin
			counter <= counter + 'd1;
		end else begin
			counter <= 0;
		end
	end 
	
	// ball movement freely and at the boundries cansu
	always @(posedge clk) begin
	if ((team1_vu_button ==1) && (team1_vd_button ==1 && (team2_vu_button ==1) && (team2_vd_button==1))&& cansu ==1) begin
			state = beginning;
			end
	else if ((((y_position-450)**2)+((x_position-300)**2) < inside_goal) // BLUE GOAL 1
				|| (((y_position-450)**2)+((x_position-400)**2) < inside_goal) // BLUE GOAL 2
				|| (((y_position-450)**2)+((x_position-500)**2) < inside_goal) // BLUE GOAL 3
		) begin
			state = beginning;
			//cansu=1;
			//score_to_team2 <= ((score_to_team2) +1);
	end
	else if ((((y_position-100)**2)+((x_position-300)**2) < inside_goal) // RED  GOAL 1
				|| (((y_position-100)**2)+((x_position-400)**2) < inside_goal) // RED  GOAL 2
				|| (((y_position-100)**2)+((x_position-500)**2) < inside_goal) // RED  GOAL 3
		) begin
			state = beginning;
			//cansu=1;
			//score_to_team1 <= ((score_to_team1)+1);
			end
		
	else begin
		state = active;
		cansu =0;
		end
		end 
			//lower boundry
				/*if ((y_position == 510-BALL_RADIUS ) && (ball_dir_y == y_down ) ) begin
				ball_dir_y <= y_up;
				ball_dir_x <= ball_dir_x;
				end
				//upper boundry
				else if ((y_position < 36 + BALL_RADIUS) && (ball_dir_y == y_up)) begin
				ball_dir_y <= y_down;
				ball_dir_x <= ball_dir_x;
				end 
				// left boundry condition
				else if((x_position < 150 + BALL_RADIUS) && (ball_dir_x== x_left) ) begin
				ball_dir_y <= ball_dir_y;
				ball_dir_x <= x_right;
				end 
				// right boundary condition
				else if((x_position > 680 - BALL_RADIUS) && (ball_dir_x == x_right)) begin
				ball_dir_x <= x_left;
				ball_dir_y <= ball_dir_y;
				end
				else if ((team1_ver_pos) - (x_position) < ((BALL_RADIUS)+(PLAYER_RADIUS)+1) && ball_collution == 0 ) begin
					ball_collution =1;
					// ball collides to player from left up corner of the player
					if ((ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_up;
					x_position <= x_position-1;
					y_position <= y_position -1;
					end 
					// ball collides to player from left down corner of the player
					else if ((ball_dir_x == x_right) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_down;
					x_position <= x_position -1;
					y_position <= y_position +1;
					end 
					// ball collides to player from right up corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_up;
					x_position <= x_position +1;
					y_position <= y_position -1;
					end 
					// ball collides to player from right down corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_down;
					x_position <= x_position+1;
					y_position <= y_position +1;
					end
			else if ((((team2_ver_pos)-(x_position)) <((BALL_RADIUS)+(PLAYER_RADIUS)+1))&& (ball_collution== 0)) begin
				ball_collution =1;
				// ball collides to player from left up corner of the player
					if ((ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_up;
					x_position <= x_position-1;
					y_position <= y_position -1;
					end 
					// ball collides to player from left down corner of the player
					else if ((ball_dir_x == x_right) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_down;
					x_position <= x_position -1;
					y_position <= y_position +1;
					end 
					// ball collides to player from right up corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_up;
					x_position <= x_position +1;
					y_position <= y_position -1;
					end 
					// ball collides to player from right down corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_down;
					x_position <= x_position+1;
					y_position <= y_position +1;
					end
				end
		end
			//ball movement
			else begin
			ball_collution = 0;
				if ((ball_dir_x == x_right) && (ball_dir_y == y_up)) begin
				x_position <= x_position + 5;
				y_position <= y_position - 5;
				end
				else if ( (ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
				x_position <= x_position + 5;
				y_position <= y_position + 5;
				end else if ((ball_dir_y == y_down) && (ball_dir_x == x_left)) begin
				x_position <= x_position - 5;
				y_position <= y_position + 5;
				end else if ((ball_dir_y == y_up) && (ball_dir_x == x_left)) begin 
				x_position <= x_position - 5;
				y_position <= y_position - 5;
				end
			end
end
	end */
		
	//cansu 
	always @(posedge clk) begin
	case (state)
	beginning : begin
		x_position     =  463;
		y_position     =  275;
	end
	active : begin
	         //lower boundry
				if ((y_position == 510 - BALL_RADIUS ) && (ball_dir_y == y_down ) ) begin
				ball_dir_y <= y_up;
				ball_dir_x <= ball_dir_x;
				end
				//upper boundry
				else if ((y_position < 36 + BALL_RADIUS) && (ball_dir_y == y_up)) begin
				ball_dir_y <= y_down;
				ball_dir_x <= ball_dir_x;
				end 
				// left boundry condition
				else if((x_position < 150 + BALL_RADIUS) && (ball_dir_x== x_left) ) begin
				ball_dir_y <= ball_dir_y;
				ball_dir_x <= x_right;
				end 
				// right boundary condition
				else if((x_position > 680 - BALL_RADIUS) && (ball_dir_x == x_right)) begin
				ball_dir_x <= x_left;
				ball_dir_y <= ball_dir_y;
				end
				//ball player interactions
				else if ((team1_ver_pos) - (x_position) < ((BALL_RADIUS)+(PLAYER_RADIUS)+1) && ball_collution == 0 ) begin
					ball_collution =1;
					// ball collides to player from left up corner of the player
					if ((ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_up;
					x_position <= x_position-1;
					y_position <= y_position -1;
					end 
					// ball collides to player from left down corner of the player
					else if ((ball_dir_x == x_right) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_down;
					x_position <= x_position -1;
					y_position <= y_position +1;
					end 
					// ball collides to player from right up corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_up;
					x_position <= x_position +1;
					y_position <= y_position -1;
					end 
			
					// ball collides to player from right down corner of the player
				else if ((ball_dir_x == x_left) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_down;
					x_position <= x_position+1;
					y_position <= y_position +1;
					end
				end
			else if ((((team2_ver_pos)-(x_position)) <((BALL_RADIUS)+(PLAYER_RADIUS)+1))&& (ball_collution== 0)) begin
				ball_collution =1;
				// ball collides to player from left up corner of the player
					if ((ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_up;
					x_position <= x_position-1;
					y_position <= y_position -1;
					end 
					// ball collides to player from left down corner of the player
					else if ((ball_dir_x == x_right) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_left;
					ball_dir_y <= y_down;
					x_position <= x_position -1;
					y_position <= y_position +1;
					end 
					// ball collides to player from right up corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_down)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_up;
					x_position <= x_position +1;
					y_position <= y_position -1;
					end 
					// ball collides to player from right down corner of the player
					else if ((ball_dir_x == x_left) && (ball_dir_y == y_up)) begin
					ball_dir_x <= x_right;
					ball_dir_y <= y_down;
					x_position <= x_position +1;
					y_position <= y_position +1;
					end
			end
		
			//ball movement
			else begin
			ball_collution = 0;
				if ((ball_dir_x == x_right) && (ball_dir_y == y_up) && (counter == 'd98)) begin
				x_position <= x_position + 5;
				y_position <= y_position - 5;
				end
				else if ( (ball_dir_x == x_right) && (ball_dir_y == y_down)) begin
				x_position <= x_position + 5;
				y_position <= y_position + 5;
				end else if ((ball_dir_y == y_down) && (ball_dir_x == x_left)) begin
				x_position <= x_position - 5;
				y_position <= y_position + 5;
				end else if ((ball_dir_y == y_up) && (ball_dir_x == x_left)) begin 
				x_position <= x_position - 5;
				y_position <= y_position - 5;
				end
			end
	end
	
	endcase 
	end  
//always @ (posedge clk) begin
//end	 
	// bluger
	/*always @ (posedge clk) begin
	if ((team1_vu_button ==1) && (team1_vd_button ==1) && (team2_vu_button ==1) && (team2_vd_button==1)) begin
			state_blugger = initial_blugger;
		end else if ( (team1_vu_button == 0 )|| (team1_vd_button == 0)|| (team2_vu_button == 0) || (team2_vd_button == 0)) begin
		state_blugger =active_blugger;
			//lower boundry
				if ((y_position == 510-BALL_RADIUS ) && (ball_dir_y == y_down ) ) begin
				ball_dir_y <= y_up;
				ball_dir_x <= ball_dir_x;
				end
				//upper boundry
				else if ((y_position < 36 + BALL_RADIUS) && (ball_dir_y == y_up)) begin
				ball_dir_y <= y_down;
				ball_dir_x <= ball_dir_x;
				end 
				// left boundry condition
				else if((x_position < 150 + BALL_RADIUS) && (ball_dir_x== x_left) ) begin
				ball_dir_y <= ball_dir_y;
				ball_dir_x <= x_right;
				end 
				// right boundary condition
				else if((x_position > 680 - BALL_RADIUS) && (ball_dir_x == x_right)) begin
				ball_dir_x <= x_left;
				ball_dir_y <= ball_dir_y;
				end
				if (PLAYER_RADIUS+
	end */
	/*always @(posedge clk ) begin
	case (state) begin
	beginning : begin
	x_position <= x_position;
	y_position <= y_position;
	end
	down: begin
	ball_dir_x <= ball_dir_x ;
	ball_dir_y <= -ball_dir_y;
	x_position <= x_position + ball_dir_x;
	y_position <= y_position + ball_dir_y;
	end
	up: begin
	ball_dir_x <= ball_dir_x ;
	ball_dir_y <= -ball_dir_y;
	end
	left: begin
	
	end
	right: begin
	
	end 
	endcase
   end */
	// ball boundary interactions furkan
	/*always @(posedge clk) begin
		if ((team1_vu_button && team1_vd_button && team2_vu_button && team2_vd_button) == 0) begin
			state = down_right;
		end else if (
			      (((y_position-450)**2)+((x_position-300)**2) < inside_goal) // BLUE GOAL 1
				|| (((y_position-450)**2)+((x_position-400)**2) < inside_goal) // BLUE GOAL 2
				|| (((y_position-450)**2)+((x_position-500)**2) < inside_goal) // BLUE GOAL 3
		) begin
			state = dead;
			score_to_team2 = 1;
		end else if (
			      (((y_position-100)**2)+((x_position-300)**2) < inside_goal) // RED  GOAL 1
				|| (((y_position-100)**2)+((x_position-400)**2) < inside_goal) // RED  GOAL 2
				|| (((y_position-100)**2)+((x_position-500)**2) < inside_goal) // RED  GOAL 3
		) begin
			state = dead;
			score_to_team1 = 1;
		end else if (y_position < 36 + BALL_RADIUS) begin
			if (state == up_left) begin
				state = down_left;
			end else begin
				state = down_right;
			end
		end else if (y_position > 510 - BALL_RADIUS) begin
			if (state == down_left) begin
				state = up_left;
			end else begin
				state = up_right;
			end
		end else if (x_position < 150 + BALL_RADIUS) begin
			if (state == down_left) begin
				state = down_right;
			end else begin
				state = up_right;
			end
		end else if (x_position > 680 - BALL_RADIUS) begin
			if (state == down_right) begin
				state = down_left;
			end else begin
				state = up_left;
			end
		end
	end */
	/*always @(posedge clk) begin
		if (counter < MOVEMENT_FREQUENCY) begin
			counter <= counter + 'd1;
		end else begin
			counter <= 0;
		end
	end
	
	always @(posedge clk) begin
		case (state)
			dead: begin
				x_position <= x_position;
				y_position <= y_position;
			end
			alive: begin
				if (counter == 'd98) begin
					x_position <= x_position + ball_dir_x;
					y_position <= y_position + ball_dir_y;
				end
			end
			up_left: begin
				if (counter == 'd98) begin
					x_position <= x_position - ball_dir_x;
					y_position <= y_position - ball_dir_y;
				end
			end
			up_right: begin
				if (counter == 'd98) begin
					x_position <= x_position + ball_dir_x;
					y_position <= y_position - ball_dir_y;
				end
			end
			down_right: begin
				if (counter == 'd98) begin
					x_position <= x_position + ball_dir_x;
					y_position <= y_position + ball_dir_y;
				end
			end
			down_left: begin
				if (counter == 'd98) begin
					x_position <= x_position - ball_dir_x;
					y_position <= y_position + ball_dir_y;
				end
			end
		endcase
	end*/
	/*
	always @(posedge clk) begin
		if (y_position < 88 + BALL_RADIUS) begin
			ball_dir_y = 5;
		end else if (y_position > 510 - BALL_RADIUS) begin
			ball_dir_y = -5;
		end else if (x_position < 145 + BALL_RADIUS) begin
			ball_dir_x = 5;
		end else if (x_position > 780 - BALL_RADIUS) begin
			ball_dir_x = -5;
		end
	end
	*/
/*
	reg [30:0] x_positions;
	reg [30:0] y_positions;
	
	initial begin
		x_positions = {10'b0 + 'd463, 10'b0 + 'd463, 10'b0 + 463};
		y_positions = {10'b0 + 'd275, 10'b0 + 'd275, 10'b0 + 275};
	end

	always @(posedge clk) begin
		x_positions <= x_positions << 'd10 + x_position;
		y_positions <= y_positions << 'd10 + y_position;
	end

*/
endmodule 