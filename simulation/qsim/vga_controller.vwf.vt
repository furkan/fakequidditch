// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2019 11:30:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fakequidditch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fakequidditch_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fakequidditch_vlg_check_tst (
	blue,
	green,
	hor_sync,
	red,
	ver_sync,
	sampler_rx
);
input [7:0] blue;
input [7:0] green;
input  hor_sync;
input [7:0] red;
input  ver_sync;
input sampler_rx;

reg [7:0] blue_expected;
reg [7:0] green_expected;
reg  hor_sync_expected;
reg [7:0] red_expected;
reg  ver_sync_expected;

reg [7:0] blue_prev;
reg [7:0] green_prev;
reg  hor_sync_prev;
reg [7:0] red_prev;
reg  ver_sync_prev;

reg [7:0] blue_expected_prev;
reg [7:0] green_expected_prev;
reg  hor_sync_expected_prev;
reg [7:0] red_expected_prev;
reg  ver_sync_expected_prev;

reg [7:0] last_blue_exp;
reg [7:0] last_green_exp;
reg  last_hor_sync_exp;
reg [7:0] last_red_exp;
reg  last_ver_sync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	blue_prev = blue;
	green_prev = green;
	hor_sync_prev = hor_sync;
	red_prev = red;
	ver_sync_prev = ver_sync;
end

// update expected /o prevs

always @(trigger)
begin
	blue_expected_prev = blue_expected;
	green_expected_prev = green_expected;
	hor_sync_expected_prev = hor_sync_expected;
	red_expected_prev = red_expected;
	ver_sync_expected_prev = ver_sync_expected;
end



// expected hor_sync
initial
begin
	hor_sync_expected = 1'bX;
	hor_sync_expected = #999000 1'b0;
end 

// expected ver_sync
initial
begin
	ver_sync_expected = 1'bX;
	ver_sync_expected = #999000 1'b0;
end 
// expected blue[ 7 ]
initial
begin
	blue_expected[7] = 1'bX;
	blue_expected[7] = #999000 1'b0;
end 
// expected blue[ 6 ]
initial
begin
	blue_expected[6] = 1'bX;
	blue_expected[6] = #999000 1'b0;
end 
// expected blue[ 5 ]
initial
begin
	blue_expected[5] = 1'bX;
	blue_expected[5] = #999000 1'b0;
end 
// expected blue[ 4 ]
initial
begin
	blue_expected[4] = 1'bX;
	blue_expected[4] = #999000 1'b0;
end 
// expected blue[ 3 ]
initial
begin
	blue_expected[3] = 1'bX;
	blue_expected[3] = #999000 1'b0;
end 
// expected blue[ 2 ]
initial
begin
	blue_expected[2] = 1'bX;
	blue_expected[2] = #999000 1'b0;
end 
// expected blue[ 1 ]
initial
begin
	blue_expected[1] = 1'bX;
	blue_expected[1] = #999000 1'b0;
end 
// expected blue[ 0 ]
initial
begin
	blue_expected[0] = 1'bX;
	blue_expected[0] = #999000 1'b0;
end 
// expected green[ 7 ]
initial
begin
	green_expected[7] = 1'bX;
	green_expected[7] = #999000 1'b0;
end 
// expected green[ 6 ]
initial
begin
	green_expected[6] = 1'bX;
	green_expected[6] = #999000 1'b0;
end 
// expected green[ 5 ]
initial
begin
	green_expected[5] = 1'bX;
	green_expected[5] = #999000 1'b0;
end 
// expected green[ 4 ]
initial
begin
	green_expected[4] = 1'bX;
	green_expected[4] = #999000 1'b0;
end 
// expected green[ 3 ]
initial
begin
	green_expected[3] = 1'bX;
	green_expected[3] = #999000 1'b0;
end 
// expected green[ 2 ]
initial
begin
	green_expected[2] = 1'bX;
	green_expected[2] = #999000 1'b0;
end 
// expected green[ 1 ]
initial
begin
	green_expected[1] = 1'bX;
	green_expected[1] = #999000 1'b0;
end 
// expected green[ 0 ]
initial
begin
	green_expected[0] = 1'bX;
	green_expected[0] = #999000 1'b0;
end 
// expected red[ 7 ]
initial
begin
	red_expected[7] = 1'bX;
	red_expected[7] = #999000 1'b0;
end 
// expected red[ 6 ]
initial
begin
	red_expected[6] = 1'bX;
	red_expected[6] = #999000 1'b0;
end 
// expected red[ 5 ]
initial
begin
	red_expected[5] = 1'bX;
	red_expected[5] = #999000 1'b0;
end 
// expected red[ 4 ]
initial
begin
	red_expected[4] = 1'bX;
	red_expected[4] = #999000 1'b0;
end 
// expected red[ 3 ]
initial
begin
	red_expected[3] = 1'bX;
	red_expected[3] = #999000 1'b0;
end 
// expected red[ 2 ]
initial
begin
	red_expected[2] = 1'bX;
	red_expected[2] = #999000 1'b0;
end 
// expected red[ 1 ]
initial
begin
	red_expected[1] = 1'bX;
	red_expected[1] = #999000 1'b0;
end 
// expected red[ 0 ]
initial
begin
	red_expected[0] = 1'bX;
	red_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(blue_expected or blue or green_expected or green or hor_sync_expected or hor_sync or red_expected or red or ver_sync_expected or ver_sync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blue = %b | expected green = %b | expected hor_sync = %b | expected red = %b | expected ver_sync = %b | ",blue_expected_prev,green_expected_prev,hor_sync_expected_prev,red_expected_prev,ver_sync_expected_prev);
	$display("| real blue = %b | real green = %b | real hor_sync = %b | real red = %b | real ver_sync = %b | ",blue_prev,green_prev,hor_sync_prev,red_prev,ver_sync_prev);
`endif
	if (
		( blue_expected_prev[0] !== 1'bx ) && ( blue_prev[0] !== blue_expected_prev[0] )
		&& ((blue_expected_prev[0] !== last_blue_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[0] = blue_expected_prev[0];
	end
	if (
		( blue_expected_prev[1] !== 1'bx ) && ( blue_prev[1] !== blue_expected_prev[1] )
		&& ((blue_expected_prev[1] !== last_blue_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[1] = blue_expected_prev[1];
	end
	if (
		( blue_expected_prev[2] !== 1'bx ) && ( blue_prev[2] !== blue_expected_prev[2] )
		&& ((blue_expected_prev[2] !== last_blue_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[2] = blue_expected_prev[2];
	end
	if (
		( blue_expected_prev[3] !== 1'bx ) && ( blue_prev[3] !== blue_expected_prev[3] )
		&& ((blue_expected_prev[3] !== last_blue_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[3] = blue_expected_prev[3];
	end
	if (
		( blue_expected_prev[4] !== 1'bx ) && ( blue_prev[4] !== blue_expected_prev[4] )
		&& ((blue_expected_prev[4] !== last_blue_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[4] = blue_expected_prev[4];
	end
	if (
		( blue_expected_prev[5] !== 1'bx ) && ( blue_prev[5] !== blue_expected_prev[5] )
		&& ((blue_expected_prev[5] !== last_blue_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[5] = blue_expected_prev[5];
	end
	if (
		( blue_expected_prev[6] !== 1'bx ) && ( blue_prev[6] !== blue_expected_prev[6] )
		&& ((blue_expected_prev[6] !== last_blue_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[6] = blue_expected_prev[6];
	end
	if (
		( blue_expected_prev[7] !== 1'bx ) && ( blue_prev[7] !== blue_expected_prev[7] )
		&& ((blue_expected_prev[7] !== last_blue_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_expected_prev);
		$display ("     Real value = %b", blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_exp[7] = blue_expected_prev[7];
	end
	if (
		( green_expected_prev[0] !== 1'bx ) && ( green_prev[0] !== green_expected_prev[0] )
		&& ((green_expected_prev[0] !== last_green_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[0] = green_expected_prev[0];
	end
	if (
		( green_expected_prev[1] !== 1'bx ) && ( green_prev[1] !== green_expected_prev[1] )
		&& ((green_expected_prev[1] !== last_green_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[1] = green_expected_prev[1];
	end
	if (
		( green_expected_prev[2] !== 1'bx ) && ( green_prev[2] !== green_expected_prev[2] )
		&& ((green_expected_prev[2] !== last_green_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[2] = green_expected_prev[2];
	end
	if (
		( green_expected_prev[3] !== 1'bx ) && ( green_prev[3] !== green_expected_prev[3] )
		&& ((green_expected_prev[3] !== last_green_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[3] = green_expected_prev[3];
	end
	if (
		( green_expected_prev[4] !== 1'bx ) && ( green_prev[4] !== green_expected_prev[4] )
		&& ((green_expected_prev[4] !== last_green_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[4] = green_expected_prev[4];
	end
	if (
		( green_expected_prev[5] !== 1'bx ) && ( green_prev[5] !== green_expected_prev[5] )
		&& ((green_expected_prev[5] !== last_green_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[5] = green_expected_prev[5];
	end
	if (
		( green_expected_prev[6] !== 1'bx ) && ( green_prev[6] !== green_expected_prev[6] )
		&& ((green_expected_prev[6] !== last_green_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[6] = green_expected_prev[6];
	end
	if (
		( green_expected_prev[7] !== 1'bx ) && ( green_prev[7] !== green_expected_prev[7] )
		&& ((green_expected_prev[7] !== last_green_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_expected_prev);
		$display ("     Real value = %b", green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_green_exp[7] = green_expected_prev[7];
	end
	if (
		( hor_sync_expected_prev !== 1'bx ) && ( hor_sync_prev !== hor_sync_expected_prev )
		&& ((hor_sync_expected_prev !== last_hor_sync_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hor_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hor_sync_expected_prev);
		$display ("     Real value = %b", hor_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hor_sync_exp = hor_sync_expected_prev;
	end
	if (
		( red_expected_prev[0] !== 1'bx ) && ( red_prev[0] !== red_expected_prev[0] )
		&& ((red_expected_prev[0] !== last_red_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[0] = red_expected_prev[0];
	end
	if (
		( red_expected_prev[1] !== 1'bx ) && ( red_prev[1] !== red_expected_prev[1] )
		&& ((red_expected_prev[1] !== last_red_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[1] = red_expected_prev[1];
	end
	if (
		( red_expected_prev[2] !== 1'bx ) && ( red_prev[2] !== red_expected_prev[2] )
		&& ((red_expected_prev[2] !== last_red_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[2] = red_expected_prev[2];
	end
	if (
		( red_expected_prev[3] !== 1'bx ) && ( red_prev[3] !== red_expected_prev[3] )
		&& ((red_expected_prev[3] !== last_red_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[3] = red_expected_prev[3];
	end
	if (
		( red_expected_prev[4] !== 1'bx ) && ( red_prev[4] !== red_expected_prev[4] )
		&& ((red_expected_prev[4] !== last_red_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[4] = red_expected_prev[4];
	end
	if (
		( red_expected_prev[5] !== 1'bx ) && ( red_prev[5] !== red_expected_prev[5] )
		&& ((red_expected_prev[5] !== last_red_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[5] = red_expected_prev[5];
	end
	if (
		( red_expected_prev[6] !== 1'bx ) && ( red_prev[6] !== red_expected_prev[6] )
		&& ((red_expected_prev[6] !== last_red_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[6] = red_expected_prev[6];
	end
	if (
		( red_expected_prev[7] !== 1'bx ) && ( red_prev[7] !== red_expected_prev[7] )
		&& ((red_expected_prev[7] !== last_red_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_expected_prev);
		$display ("     Real value = %b", red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_red_exp[7] = red_expected_prev[7];
	end
	if (
		( ver_sync_expected_prev !== 1'bx ) && ( ver_sync_prev !== ver_sync_expected_prev )
		&& ((ver_sync_expected_prev !== last_ver_sync_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ver_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ver_sync_expected_prev);
		$display ("     Real value = %b", ver_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ver_sync_exp = ver_sync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fakequidditch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] blue;
wire [7:0] green;
wire hor_sync;
wire [7:0] red;
wire ver_sync;

wire sampler;                             

// assign statements (if any)                          
fakequidditch i1 (
// port map - connection between master ports and signals/registers   
	.blue(blue),
	.clk(clk),
	.green(green),
	.hor_sync(hor_sync),
	.red(red),
	.ver_sync(ver_sync)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

fakequidditch_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

fakequidditch_vlg_check_tst tb_out(
	.blue(blue),
	.green(green),
	.hor_sync(hor_sync),
	.red(red),
	.ver_sync(ver_sync),
	.sampler_rx(sampler)
);
endmodule

